import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;



public class Lotto implements Cloneable{
	
	public static void main(String[] args) {
		int totalCnt;
		int totalRankCnt = 0;
		List<Integer> answer = new ArrayList<Integer>();
		Map<Integer, Integer> rankCntMap = new HashMap<>();
		
		if(args.length < 3){
			System.out.println("매개변수가 부족합니다.");
			return;
		}
		
		//1등 숫자 체크 validation
		if(args[0].split(",").length != 6){
			System.out.println("1등의 숫자가 6개가 아닙니다.");
			return;
		}
		
		for(String chkVal : args[0].split(",")){
			if(!numChk(chkVal)){
				return;
			}
			answer.add(Integer.parseInt(chkVal));
		}
		
		if(!duplicateIndexValChk(answer)){
			System.out.println("1등의 숫자가 중복되는 값이 있습니다.");
			return;
		}

		//각등수마다 생성할 숫자의 수 validation
		for(String temp : args[1].split(",")){
			String[] keyVal = temp.split(":");
			
			if(!numChk(keyVal[1])){
				return;
			}
			
			//추후 등수별 갯수체크는 여기 추가
			
			rankCntMap.put(Integer.parseInt(keyVal[0]), Integer.parseInt(keyVal[1]));
			totalRankCnt += Integer.parseInt(keyVal[1]);
			
		}
		if(rankCntMap.size() != args[1].split(",").length){
			System.out.println("중복된 순위가 있습니다.");
			return;
		}
		
		//전체 생성될 개수 validation
		if(!numChk(args[2])){
			return;
		}
		
		totalCnt = Integer.parseInt(args[2]);
		if(totalCnt < totalRankCnt){
			System.out.println("전체 생성될 개수가 각등수마다 생성될 숫자의 합보다 작을 수 없습니다.");
			return;
		}
		
		rankCntMap.put(0, totalCnt - totalRankCnt);
		System.out.println(totalCnt/totalRankCnt);
		lottoMaker(answer,rankCntMap);

	}
	
	static void lottoMaker(List<Integer> answer, Map<Integer,Integer> rankCntMap){
		
		Set<Integer> key = rankCntMap.keySet();
		List<ArrayList<Integer>> rankResult = new ArrayList<ArrayList<Integer>>();
		List<ArrayList<Integer>> noRankResult = new ArrayList<ArrayList<Integer>>();
		List<Integer> addList = new ArrayList<Integer>();
		int rankCnt;
		
		
		for(int mapkey : key){
			rankCnt = rankCntMap.get(mapkey);
			int i  = 0;
			while(i < rankCnt){
				int sameNumCnt = answer.size() - (1-mapkey);
				
				if(mapkey == 0){ sameNumCnt = mapkey; }
				
				addList = lottoTest(answer, sameNumCnt);
				if(duplicateListChk(rankResult,addList) && duplicateListChk(noRankResult,addList)){
					if(mapkey != 0){
						rankResult.add((ArrayList<Integer>) addList);
					}else{
						noRankResult.add((ArrayList<Integer>) addList);
					}
					i++;
				}
			}
		}
		
		
		System.out.println("끝");
	}
	
	static List<Integer> lottoTest(List<Integer> answer, int sameNumCnt){
		Random ran = new Random();
		List<Integer> result = new ArrayList<Integer>();
		
		//정답과 같아야하는 숫자 뽑기 sameNumCnt 만큼
		while(result.size() != sameNumCnt){
			int popIndex = ran.nextInt(sameNumCnt);
			System.out.println(popIndex);
			if(!result.contains(answer.get(popIndex))){
				result.add(answer.get(popIndex));
			}
		}
		
		//정답과 다른 숫자 뽑기 6-sameNumCnt 만큼
		while(result.size() != 6){
			int addNum = ran.nextInt(45)+1;
			if(!answer.contains(addNum) && !result.contains(addNum)){
				result.add(addNum);
			}
		}
		
		return result;
	}
	
	/**
	 * 
	 * @param str 비어있는지 확인할 값
	 * @return boolean
	 */   
	static boolean emptyChk(String str){
		if(str == null || str.isEmpty()){
			return false;
		}
		return true;
	}
	
	/**
	 * 
	 * @param str 변환할 숫자
	 * @return 문자를 숫자로 변환해서 보낸다
	 */
	static boolean numChk(String str){
		try{
			Integer.parseInt(str);
		}catch(NumberFormatException e){
			
			return false;
			//throw e;
		}
		return true;
	}
	
	/**
	 * 
	 * @param argsAnswer 사이즈를 체크할 list
	 * @param size 기준 사이즈
	 * @return boolean
	 */
	static boolean arrayLengthChk(String[] argsAnswer, int size){
		if(argsAnswer.length != size){
			return false;
		}
		return true;
	}
	
	/**
	 * 중복 제거 이후 size가 같으면 중복이 없는것으로 판단
	 * @param list 중복된 값이 있는지를 찾는 list
	 * @return boolean
	 */
	static boolean duplicateIndexValChk(List<Integer> list){
		HashSet<Integer> chkList = new HashSet<Integer>(list); 
		if(chkList.size() != list.size()){
			return false;
		}
		return true;
	}
	
	/**
	 * 리스트 요소가 전부 같은게 있는지 확인
	 * @param list
	 * @param compareList
	 * @return boolean
	 */
	static boolean duplicateListChk(List<ArrayList<Integer>> list, List compareList){
		for(List a : list){
			if(a.containsAll(compareList)){
				return false;
			}
		}
		return true;
	}
}
